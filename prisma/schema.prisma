generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id            Int            @id @default(autoincrement())
  name          String
  description   String         @db.Text
  price         Float
  stock         Int            @default(1)
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  product_image ProductImage[]
}

model ProductImage {
  id         Int     @id @default(autoincrement())
  image      String  @db.Text
  product_id Int
  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model Trainer {
  id             Int      @id @default(autoincrement())
  first_name     String
  last_name      String
  email          String   @unique
  phone          String
  specialization String
  image          String   @db.Text
  description    String?
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

//*----------
model Local {
  id            Int             @id @default(autoincrement())
  name          String
  description   String?         @db.Text
  phone         String
  opening_start DateTime        @db.Time() // Hora de apertura (por ejemplo, 10:00 AM)
  opening_end   DateTime        @db.Time() // Hora de cierre (por ejemplo, 6:00 PM)
  isActivate    Boolean         @default(true)
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  images        LocalImages[] // uno a muchos
  clases        LocalClass[] // muchos a muchos
  services      LocalService[] // muchos a muchos
  location      LocalLocation[] // uno a uno
}

model LocalLocation {
  id        Int    @id @default(autoincrement())
  address   String
  city      String
  country   String
  zip_code  String
  latitude  Float // latitud
  longitude Float // longitud
  local_id  Int    @unique
  local     Local  @relation(fields: [local_id], references: [id], onDelete: Cascade)
}

model LocalImages {
  id       Int     @id @default(autoincrement())
  image    String  @db.Text
  default  Boolean @default(false)
  local_id Int
  local    Local   @relation(fields: [local_id], references: [id], onDelete: Cascade)
}

model LocalClass {
  id       Int      @id @default(autoincrement())
  local_id Int
  local    Local    @relation(fields: [local_id], references: [id], onDelete: Cascade)
  class_id Int
  class    ClassGym @relation(fields: [class_id], references: [id], onDelete: Cascade)
}

model LocalService {
  id         Int        @id @default(autoincrement())
  local_id   Int
  local      Local      @relation(fields: [local_id], references: [id], onDelete: Cascade)
  service_id Int
  service    ServiceGym @relation(fields: [service_id], references: [id], onDelete: Cascade)
}

// -------------
model ClassGym {
  id          Int          @id @default(autoincrement())
  name        String
  icon        String?      @db.Text
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  local_class LocalClass[]
}

model ServiceGym {
  id            Int            @id @default(autoincrement())
  name          String
  icon          String?        @db.Text
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  local_service LocalService[]
}

//* ----------USER----------
model User {
  id                     Int             @id @default(autoincrement())
  email                  String          @unique
  password               String          @db.Text
  first_name             String
  last_name              String
  is_active              Boolean?        @default(true)
  is_confirmed           Boolean?        @default(false)
  is_Google_account      Boolean?        @default(false)
  picture                String?         @db.Text
  created_at             DateTime        @default(now())
  updated_at             DateTime        @updatedAt
  MembershipPay MembershipPay[]
}

//* ----------PLANS----------
model Membership {
  id                 String          @id @unique @default(uuid())
  duration_in_months Int             @unique
  name               String
  price              Float
  description        String?         @db.Text
  discount           Float?          @default(0)
  price_total        Float?          @default(0)
  status             Boolean?        @default(true)
  created_at         DateTime        @default(now())
  updated_at         DateTime        @updatedAt
  MembershipPay      MembershipPay[]
}

model MembershipPay {
  id               Int        @id @default(autoincrement())
  membership_start DateTime   @db.Date()
  membership_end   DateTime   @db.Date()
  is_active        Boolean
  access_code      String
  user_id          Int
  user             User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  plans_id         String
  membership       Membership @relation(fields: [plans_id], references: [id], onDelete: Cascade)
  created_at       DateTime   @default(now())
  Payment          Payment[]
}

model Payment {
  id                     Int           @id @default(autoincrement())
  amount                 Float
  payment_date           DateTime
  payment_method         String
  membership_id          Int
  transaction_membership MembershipPay @relation(fields: [membership_id], references: [id], onDelete: Cascade)
  created_at             DateTime      @default(now())
  updated_at             DateTime      @updatedAt
}
