generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id            Int            @id @default(autoincrement())
  name          String
  description   String         @db.Text
  price         Float
  stock         Int            @default(1)
  isActive      Boolean        @default(true)
  created_At    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  product_image ProductImage[]
}

model ProductImage {
  id         Int     @id @default(autoincrement())
  image      String  @db.Text
  product_id Int
  product    Product @relation(fields: [product_id], references: [id])
}

model Trainer {
  id             Int      @id @default(autoincrement())
  first_name     String
  last_name      String
  email          String   @unique
  phone          String?
  specialization String
  image          String   @db.Text
  description    String?
  isActive       Boolean? @default(true)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
}

//*----------
model Local {
  id            Int            @id @default(autoincrement())
  name          String
  description   String         @db.Text
  address       String
  phone         String
  opening_start DateTime       @db.Time() // Hora de apertura (por ejemplo, 10:00 AM)
  opening_end   DateTime       @db.Time() // Hora de cierre (por ejemplo, 6:00 PM)
  isActivate    Boolean?       @default(true)
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  local_images  LocalImages[] // uno a muchos
  class         LocalClass[] // muchos a muchos
  services      LocalService[]
}

model LocalImages {
  id       Int     @id @default(autoincrement())
  image    String  @db.Text
  default  Boolean @default(false)
  local_id Int
  local    Local   @relation(fields: [local_id], references: [id])
}

model LocalClass {
  id       Int      @id @default(autoincrement())
  name     String
  local_id Int
  local    Local    @relation(fields: [local_id], references: [id])
  class_id Int
  class    ClassGym @relation(fields: [class_id], references: [id])
}

model LocalService {
  id         Int        @id @default(autoincrement())
  name       String
  local_id   Int
  local      Local      @relation(fields: [local_id], references: [id])
  service_id Int
  service    ServiceGym @relation(fields: [service_id], references: [id])
}

// -------------
model ClassGym {
  id          Int          @id @default(autoincrement())
  name        String
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  local_class LocalClass[]
}

model ServiceGym {
  id            Int            @id @default(autoincrement())
  name          String
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  local_service LocalService[]
}
